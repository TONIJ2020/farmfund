{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TONY\\\\Desktop\\\\Genesys-Tech-Hub\\\\Farmfund\\\\src\\\\Components\\\\ProgressBar\\\\ProgressBar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst React = require('react');\n\nconst ReactBootstrap = {\n  Panel: require('react-bootstrap/lib/Panel'),\n  ProgressBar: require('react-bootstrap/lib/ProgressBar')\n};\n\nconst {\n  number,\n  string,\n  oneOf,\n  node\n} = require('prop-types');\n\nclass ProgressBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: props.start\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this._timeoutId = setTimeout(() => this._isMounted && this.setState({\n      loaded: this.props.now\n    }), 500);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._timeoutId);\n    this._isMounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.now !== this.props.now) {\n      this.setState({\n        loaded: nextProps.now\n      });\n    }\n  }\n\n  render() {\n    const {\n      duration,\n      subtitle,\n      type,\n      title,\n      children\n    } = this.props;\n    const {\n      loaded\n    } = this.state; // TODO: We need a better way of handling the CSS transitions here.\n\n    const timing = duration + 's';\n    const uniqueClass = 'progressBar' + timing;\n    const style = '.' + uniqueClass + ' .progress-bar {transition-duration: ' + timing + ';}';\n    return /*#__PURE__*/_jsxDEV(ReactBootstrap.Panel, {\n      header: title,\n      bsStyle: type,\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), subtitle && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: subtitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(ReactBootstrap.ProgressBar, {\n        active: true,\n        striped: true,\n        className: uniqueClass,\n        bsStyle: type,\n        now: loaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nProgressBar.propTypes = {\n  start: number,\n  now: number,\n  duration: number,\n  title: string,\n  subtitle: string,\n  type: oneOf(['success', 'info', 'warning', 'danger']),\n  children: node\n};\nProgressBar.defaultProps = {\n  start: 0,\n  now: 100,\n  duration: 1,\n  title: null,\n  subtitle: null,\n  type: 'success'\n};\nmodule.exports = ProgressBar;","map":{"version":3,"sources":["C:/Users/TONY/Desktop/Genesys-Tech-Hub/Farmfund/src/Components/ProgressBar/ProgressBar.js"],"names":["React","require","ReactBootstrap","Panel","ProgressBar","number","string","oneOf","node","Component","constructor","props","state","loaded","start","componentDidMount","_isMounted","_timeoutId","setTimeout","setState","now","componentWillUnmount","clearTimeout","componentWillReceiveProps","nextProps","render","duration","subtitle","type","title","children","timing","uniqueClass","style","propTypes","defaultProps","module","exports"],"mappings":"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","sourcesContent":["const React = require('react')\r\nconst ReactBootstrap = {\r\n  Panel: require('react-bootstrap/lib/Panel'),\r\n  ProgressBar: require('react-bootstrap/lib/ProgressBar')\r\n}\r\nconst { number, string, oneOf, node } = require('prop-types')\r\n\r\nclass ProgressBar extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      loaded: props.start\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    this._isMounted = true\r\n    this._timeoutId = setTimeout(() => this._isMounted && this.setState({ loaded: this.props.now }), 500)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearTimeout(this._timeoutId)\r\n    this._isMounted = false\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps.now !== this.props.now) {\r\n      this.setState({ loaded: nextProps.now })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { duration, subtitle, type, title, children } = this.props\r\n    const { loaded } = this.state\r\n\r\n    // TODO: We need a better way of handling the CSS transitions here.\r\n    const timing = duration + 's'\r\n    const uniqueClass = 'progressBar' + timing\r\n    const style = '.' + uniqueClass + ' .progress-bar {transition-duration: ' + timing + ';}'\r\n\r\n    return (\r\n      <ReactBootstrap.Panel header={title} bsStyle={type}>\r\n        <style>{style}</style>\r\n        {subtitle && <p>{subtitle}</p>}\r\n        <ReactBootstrap.ProgressBar\r\n          active\r\n          striped\r\n          className={uniqueClass}\r\n          bsStyle={type}\r\n          now={loaded}\r\n        />\r\n        {children}\r\n      </ReactBootstrap.Panel>\r\n    )\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  start: number,\r\n  now: number,\r\n  duration: number,\r\n  title: string,\r\n  subtitle: string,\r\n  type: oneOf(['success', 'info', 'warning', 'danger']),\r\n  children: node\r\n}\r\n\r\nProgressBar.defaultProps = {\r\n  start: 0,\r\n  now: 100,\r\n  duration: 1,\r\n  title: null,\r\n  subtitle: null,\r\n  type: 'success'\r\n}\r\n\r\nmodule.exports = ProgressBar"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TONY\\\\Desktop\\\\Genesys-Tech-Hub\\\\Farmfund\\\\src\\\\Components\\\\ProgressBar\\\\LoadingBar.js\";\nimport React, { Component } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { bool, number, object, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DEFAULT_SCOPE } from './LoadingBarDucks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UPDATE_TIME = 400;\nexport const MAX_PROGRESS = 99;\nexport const PROGRESS_INCREASE = 20;\nexport const ANIMATION_DURATION = UPDATE_TIME * 2;\nexport const TERMINATING_ANIMATION_DURATION = UPDATE_TIME / 2;\nconst initialState = {\n  percent: 0,\n  status: 'hidden'\n};\n\nclass LoadingBar extends Component {\n  static shouldStart(props, state) {\n    return props.loading > 0 && ['hidden', 'stopping'].indexOf(state.status) >= 0;\n  }\n\n  static shouldStop(props, state) {\n    return props.loading === 0 && ['starting', 'running'].indexOf(state.status) >= 0;\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (LoadingBar.shouldStart(nextProps, prevState)) {\n      return {\n        status: 'starting'\n      };\n    }\n\n    if (LoadingBar.shouldStop(nextProps, prevState)) {\n      return {\n        status: 'stopping'\n      };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.reset = () => {\n      this.terminatingAnimationTimeoutId = null;\n      this.setState(initialState);\n    };\n\n    this.newPercent = (percent, progressIncrease) => {\n      // Use cosine as a smoothing function\n      // It could be any function to slow down progress near the ending 100%\n      const smoothedProgressIncrease = progressIncrease * Math.cos(percent * (Math.PI / 2 / 100));\n      return percent + smoothedProgressIncrease;\n    };\n\n    this.simulateProgress = () => {\n      this.setState((prevState, {\n        maxProgress,\n        progressIncrease\n      }) => {\n        let {\n          percent\n        } = prevState;\n        const newPercent = this.newPercent(percent, progressIncrease);\n\n        if (newPercent <= maxProgress) {\n          percent = newPercent;\n        }\n\n        return {\n          percent\n        };\n      });\n    };\n\n    this.state = { ...initialState\n    };\n  }\n\n  componentDidMount() {\n    const {\n      status\n    } = this.state;\n\n    if (status === 'starting') {\n      this.start();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      status\n    } = this.state;\n\n    if (prevState.status !== status) {\n      if (status === 'starting') {\n        this.start();\n      }\n\n      if (status === 'stopping') {\n        this.stop();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.progressIntervalId);\n    clearTimeout(this.terminatingAnimationTimeoutId);\n  }\n\n  start() {\n    // There could be previous termination animation going, so we need to\n    // cancel it and forcefully reset the Loading Bar before starting\n    // the progress simulation from 0\n    if (this.terminatingAnimationTimeoutId) {\n      clearTimeout(this.terminatingAnimationTimeoutId);\n      this.reset();\n    }\n\n    const {\n      updateTime\n    } = this.props;\n    this.progressIntervalId = setInterval(this.simulateProgress, updateTime);\n    this.setState({\n      status: 'running'\n    });\n  }\n\n  stop() {\n    const {\n      showFastActions\n    } = this.props;\n    clearInterval(this.progressIntervalId);\n    this.progressIntervalId = null;\n    const terminatingAnimationDuration = this.isShown() || showFastActions ? TERMINATING_ANIMATION_DURATION : 0;\n    this.terminatingAnimationTimeoutId = setTimeout(this.reset, terminatingAnimationDuration);\n    this.setState({\n      percent: 100\n    });\n  }\n\n  isShown() {\n    const {\n      percent\n    } = this.state;\n    return percent > 0 && percent <= 100;\n  }\n\n  buildStyle() {\n    const {\n      status,\n      percent\n    } = this.state;\n    const {\n      className,\n      style: customStyle\n    } = this.props;\n    const animationDuration = status === 'stopping' ? TERMINATING_ANIMATION_DURATION : ANIMATION_DURATION;\n    const style = {\n      width: `${percent}%`,\n      transition: `width ${animationDuration}ms linear 0s`,\n      msTransition: `width ${animationDuration}ms linear 0s`,\n      WebkitTransition: `width ${animationDuration}ms linear 0s`,\n      MozTransition: `width ${animationDuration}ms linear 0s`,\n      OTransition: `width ${animationDuration}ms linear 0s`,\n      willChange: 'width, opacity'\n    }; // Use default styling if there's no CSS class applied\n\n    if (!className) {\n      style.height = '3px';\n      style.backgroundColor = 'red';\n      style.position = 'absolute';\n    }\n\n    if (this.isShown()) {\n      style.opacity = '1';\n    } else {\n      style.opacity = '0';\n    }\n\n    return { ...style,\n      ...customStyle\n    };\n  }\n\n  render() {\n    const {\n      status\n    } = this.state;\n    const {\n      direction,\n      className\n    } = this.props;\n\n    if (status === 'hidden') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        direction\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.buildStyle(),\n        className: className\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'table',\n          clear: 'both'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nLoadingBar.propTypes = {\n  className: string,\n  direction: string,\n  loading: number,\n  maxProgress: number,\n  progressIncrease: number,\n  scope: string,\n  showFastActions: bool,\n  style: object,\n  updateTime: number\n};\nLoadingBar.defaultProps = {\n  className: '',\n  direction: 'ltr',\n  loading: 0,\n  maxProgress: MAX_PROGRESS,\n  progressIncrease: PROGRESS_INCREASE,\n  scope: DEFAULT_SCOPE,\n  showFastActions: false,\n  style: {},\n  updateTime: UPDATE_TIME\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  loading: state.loadingBar[ownProps.scope || DEFAULT_SCOPE]\n});\n\npolyfill(LoadingBar);\nconst ConnectedLoadingBar = connect(mapStateToProps)(LoadingBar);\nexport { LoadingBar, ConnectedLoadingBar as default };","map":{"version":3,"sources":["C:/Users/TONY/Desktop/Genesys-Tech-Hub/Farmfund/src/Components/ProgressBar/LoadingBar.js"],"names":["React","Component","polyfill","bool","number","object","string","connect","DEFAULT_SCOPE","UPDATE_TIME","MAX_PROGRESS","PROGRESS_INCREASE","ANIMATION_DURATION","TERMINATING_ANIMATION_DURATION","initialState","percent","status","LoadingBar","shouldStart","props","state","loading","indexOf","shouldStop","getDerivedStateFromProps","nextProps","prevState","constructor","reset","terminatingAnimationTimeoutId","setState","newPercent","progressIncrease","smoothedProgressIncrease","Math","cos","PI","simulateProgress","maxProgress","componentDidMount","start","componentDidUpdate","prevProps","stop","componentWillUnmount","clearInterval","progressIntervalId","clearTimeout","updateTime","setInterval","showFastActions","terminatingAnimationDuration","isShown","setTimeout","buildStyle","className","style","customStyle","animationDuration","width","transition","msTransition","WebkitTransition","MozTransition","OTransition","willChange","height","backgroundColor","position","opacity","render","direction","display","clear","propTypes","scope","defaultProps","mapStateToProps","ownProps","loadingBar","ConnectedLoadingBar","default"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { polyfill } from 'react-lifecycles-compat';\r\nimport {\r\n  bool,\r\n  number,\r\n  object,\r\n  string,\r\n} from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { DEFAULT_SCOPE } from './LoadingBarDucks';\r\n\r\nexport const UPDATE_TIME = 400\r\nexport const MAX_PROGRESS = 99\r\nexport const PROGRESS_INCREASE = 20\r\nexport const ANIMATION_DURATION = UPDATE_TIME * 2\r\nexport const TERMINATING_ANIMATION_DURATION = UPDATE_TIME / 2\r\n\r\nconst initialState = {\r\n  percent: 0,\r\n  status: 'hidden',\r\n}\r\n\r\nclass LoadingBar extends Component {\r\n  static shouldStart(props, state) {\r\n    return (\r\n      props.loading > 0 && ['hidden', 'stopping'].indexOf(state.status) >= 0\r\n    )\r\n  }\r\n\r\n  static shouldStop(props, state) {\r\n    return (\r\n      props.loading === 0 && ['starting', 'running'].indexOf(state.status) >= 0\r\n    )\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (LoadingBar.shouldStart(nextProps, prevState)) {\r\n      return { status: 'starting' }\r\n    }\r\n\r\n    if (LoadingBar.shouldStop(nextProps, prevState)) {\r\n      return { status: 'stopping' }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { ...initialState }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { status } = this.state\r\n    if (status === 'starting') {\r\n      this.start()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { status } = this.state\r\n    if (prevState.status !== status) {\r\n      if (status === 'starting') {\r\n        this.start()\r\n      }\r\n\r\n      if (status === 'stopping') {\r\n        this.stop()\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.progressIntervalId)\r\n    clearTimeout(this.terminatingAnimationTimeoutId)\r\n  }\r\n\r\n  reset = () => {\r\n    this.terminatingAnimationTimeoutId = null\r\n    this.setState(initialState)\r\n  }\r\n\r\n  newPercent = (percent, progressIncrease) => {\r\n    // Use cosine as a smoothing function\r\n    // It could be any function to slow down progress near the ending 100%\r\n    const smoothedProgressIncrease = (\r\n      progressIncrease * Math.cos(percent * (Math.PI / 2 / 100))\r\n    )\r\n\r\n    return percent + smoothedProgressIncrease\r\n  }\r\n\r\n  simulateProgress = () => {\r\n    this.setState((prevState, { maxProgress, progressIncrease }) => {\r\n      let { percent } = prevState\r\n      const newPercent = this.newPercent(percent, progressIncrease)\r\n\r\n      if (newPercent <= maxProgress) {\r\n        percent = newPercent\r\n      }\r\n\r\n      return { percent }\r\n    })\r\n  }\r\n\r\n  start() {\r\n    // There could be previous termination animation going, so we need to\r\n    // cancel it and forcefully reset the Loading Bar before starting\r\n    // the progress simulation from 0\r\n    if (this.terminatingAnimationTimeoutId) {\r\n      clearTimeout(this.terminatingAnimationTimeoutId)\r\n      this.reset()\r\n    }\r\n\r\n    const { updateTime } = this.props\r\n    this.progressIntervalId = setInterval(\r\n      this.simulateProgress,\r\n      updateTime,\r\n    )\r\n    this.setState({ status: 'running' })\r\n  }\r\n\r\n  stop() {\r\n    const { showFastActions } = this.props\r\n    clearInterval(this.progressIntervalId)\r\n    this.progressIntervalId = null\r\n\r\n    const terminatingAnimationDuration = (\r\n      this.isShown() || showFastActions\r\n        ? TERMINATING_ANIMATION_DURATION : 0\r\n    )\r\n\r\n    this.terminatingAnimationTimeoutId = setTimeout(\r\n      this.reset,\r\n      terminatingAnimationDuration,\r\n    )\r\n\r\n    this.setState({ percent: 100 })\r\n  }\r\n\r\n  isShown() {\r\n    const { percent } = this.state\r\n    return percent > 0 && percent <= 100\r\n  }\r\n\r\n  buildStyle() {\r\n    const { status, percent } = this.state\r\n    const { className, style: customStyle } = this.props\r\n\r\n    const animationDuration = (\r\n      status === 'stopping'\r\n        ? TERMINATING_ANIMATION_DURATION\r\n        : ANIMATION_DURATION\r\n    )\r\n\r\n    const style = {\r\n      width: `${percent}%`,\r\n      transition: `width ${animationDuration}ms linear 0s`,\r\n      msTransition: `width ${animationDuration}ms linear 0s`,\r\n      WebkitTransition: `width ${animationDuration}ms linear 0s`,\r\n      MozTransition: `width ${animationDuration}ms linear 0s`,\r\n      OTransition: `width ${animationDuration}ms linear 0s`,\r\n      willChange: 'width, opacity',\r\n    }\r\n    // Use default styling if there's no CSS class applied\r\n    if (!className) {\r\n      style.height = '3px'\r\n      style.backgroundColor = 'red'\r\n      style.position = 'absolute'\r\n    }\r\n\r\n    if (this.isShown()) {\r\n      style.opacity = '1'\r\n    } else {\r\n      style.opacity = '0'\r\n    }\r\n\r\n    return { ...style, ...customStyle }\r\n  }\r\n\r\n  render() {\r\n    const { status } = this.state\r\n    const { direction, className } = this.props\r\n    if (status === 'hidden') {\r\n      return <div />\r\n    }\r\n\r\n    return (\r\n      <div style={{ direction }}>\r\n        <div style={this.buildStyle()} className={className} />\r\n        <div style={{ display: 'table', clear: 'both' }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nLoadingBar.propTypes = {\r\n  className: string,\r\n  direction: string,\r\n  loading: number,\r\n  maxProgress: number,\r\n  progressIncrease: number,\r\n  scope: string,\r\n  showFastActions: bool,\r\n  style: object,\r\n  updateTime: number,\r\n}\r\n\r\nLoadingBar.defaultProps = {\r\n  className: '',\r\n  direction: 'ltr',\r\n  loading: 0,\r\n  maxProgress: MAX_PROGRESS,\r\n  progressIncrease: PROGRESS_INCREASE,\r\n  scope: DEFAULT_SCOPE,\r\n  showFastActions: false,\r\n  style: {},\r\n  updateTime: UPDATE_TIME,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  loading: state.loadingBar[ownProps.scope || DEFAULT_SCOPE],\r\n})\r\n\r\npolyfill(LoadingBar)\r\nconst ConnectedLoadingBar = connect(mapStateToProps)(LoadingBar)\r\n\r\nexport {\r\n  LoadingBar,\r\n  ConnectedLoadingBar as default,\r\n}"]},"metadata":{},"sourceType":"module"}